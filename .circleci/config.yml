# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
    # specify the version you desire here
    - image: circleci/openjdk:11-jdk

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
    - checkout

    - setup_remote_docker:
        docker_layer_caching: true

    # Download and cache dependencies
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "build.gradle.kts" }}
        # fallback to using the latest cache if no exact match is found
        - v1-dependencies-

    - run: gradle dependencies

    - save_cache:
        paths:
        - ~/.gradle
        key: v1-dependencies-{{ checksum "build.gradle.kts" }}

    # run tests!
    - run: ./gradlew build

    - run:
        name: github creds
        command: |
          set -e
          git clone https://github.com/navikt/github-apps-support.git
          export PATH=`pwd`/github-apps-support/bin:$PATH
          echo $HELSECI_KEY | tr '_' '\n' > helseci.key
          export GITHUB_APP_ID=19726
          export GH_TOKEN=$(generate-installation-token.sh `generate-jwt.sh helseci.key $GITHUB_APP_ID`)
          echo -e "machine api.github.com login x-access-token password $GH_TOKEN" > ~/.netrc
          rm helseci.key

    - run:
        name: assemble and push docker image
        command: |
          set -e
          if [ -z "${CIRCLE_PULL_REQUEST}" ] && [ "${CIRCLE_BRANCH}" = "master" ]; then
            export DOCKER_IMG_NAME="navikt/spinder"
            export COMMIT_SHORT="$(git rev-parse --short HEAD)"
            echo "export DOCKER_IMG_NAME=$DOCKER_IMG_NAME" >> $BASH_ENV
            echo "export COMMIT_SHORT=$COMMIT_SHORT" >> $BASH_ENV

            docker build . -t $DOCKER_IMG_NAME:$COMMIT_SHORT

            echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin
            docker push $DOCKER_IMG_NAME:$COMMIT_SHORT
          fi


    - run:
        name: deploy to preprod
        command: |
          set -e
          docker create -v /nais --name naisyamlpreprod alpine:3.4 /bin/true
          docker cp deploy/preprod.yaml naisyamlpreprod:/nais
          if [ -z "${CIRCLE_PULL_REQUEST}" ] && [ "${CIRCLE_BRANCH}" = "master" ]; then
             PREPROD_NAISERATOR=$(docker run --volumes-from naisyamlpreprod mikefarah/yq yq r /nais/preprod.yaml -j)
             PREPROD_NAISERATOR=$(echo $PREPROD_NAISERATOR | jq '.spec.image = "'$DOCKER_IMG_NAME':'$COMMIT_SHORT'"' -c)
             PREPROD_DEPLOYMENT=$(cat deploy/deployreq.json | jq '.payload.kubernetes.resources += ['$PREPROD_NAISERATOR']')
             PREPROD_DEPLOYMENT=$(echo $PREPROD_DEPLOYMENT | jq '.environment = "dev-fss"')
             PREPROD_DEPLOYMENT=$(echo $PREPROD_DEPLOYMENT | jq '.ref = "'$COMMIT_SHORT'"')
             curl -i -n --fail \
                 -X POST \
                 -d "$PREPROD_DEPLOYMENT" \
                 -H "Accept: application/vnd.github.ant-man-preview+json" \
                 https://api.github.com/repos/navikt/helse-spinder/deployments
          fi
#    - run:
#        name: deploy to prod
#        command: |
#          set -e
#          docker create -v /nais --name naisyamlprod alpine:3.4 /bin/true
#          docker cp deploy/prod.yaml naisyamlprod:/nais
#          if [ -z "${CIRCLE_PULL_REQUEST}" ] && [ "${CIRCLE_BRANCH}" = "master" ]; then
#             PROD_NAISERATOR=$(docker run --volumes-from naisyamlprod mikefarah/yq yq r /nais/prod.yaml -j)
#             PROD_NAISERATOR=$(echo $PROD_NAISERATOR | jq '.spec.image = "'$DOCKER_IMG_NAME':'$COMMIT_SHORT'"' -c)
#             PROD_DEPLOYMENT=$(cat deploy/deployreq.json | jq '.payload.kubernetes.resources += ['$PROD_NAISERATOR']')
#             PROD_DEPLOYMENT=$(echo $PROD_DEPLOYMENT | jq '.environment = "prod-fss"')
#             PROD_DEPLOYMENT=$(echo $PROD_DEPLOYMENT | jq '.ref = "'$COMMIT_SHORT'"')
#             curl -i -n --fail \
#                 -X POST \
#                 -d "$PROD_DEPLOYMENT" \
#                 -H "Accept: application/vnd.github.ant-man-preview+json" \
#                 https://api.github.com/repos/navikt/helse-spinder/deployments
#          fi
